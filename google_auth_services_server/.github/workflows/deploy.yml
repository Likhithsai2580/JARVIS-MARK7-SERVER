name: Deploy Google Auth Server

on:
  schedule:
    - cron: '0 */6 * * *'  # Run every 6 hours
  workflow_dispatch:  # Allow manual triggers

jobs:
  deploy:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        instance: [1, 2]  # 2 instances for Google Auth server
    
    steps:
    - uses: actions/checkout@v2
    
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.10'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install httpx asyncio fastapi uvicorn google-auth google-auth-oauthlib
    
    - name: Create .env file
      run: |
        echo "DNS_SERVER_URL=${{ secrets.DNS_SERVER_URL }}" >> .env
        echo "HOST=${{ secrets.HOST }}" >> .env
        echo "BASE_PORT=5004" >> .env
        echo "PORT=$(( 5004 + ${{ matrix.instance }} ))" >> .env
        echo "INSTANCE_ID=${{ matrix.instance }}" >> .env
        echo "ENV=production" >> .env
        echo "DEBUG=False" >> .env
        # Google Auth specific configurations
        echo "GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}" >> .env
        echo "GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }}" >> .env
        echo "GOOGLE_REDIRECT_URI=${{ secrets.GOOGLE_REDIRECT_URI }}" >> .env
        echo "SESSION_SECRET=${{ secrets.SESSION_SECRET }}" >> .env
    
    - name: Start Server and Monitor
      run: |
        # Start server with DNS integration
        python server.py &
        SERVER_PID=$!
        
        # Health check loop
        while true; do
          if ! kill -0 $SERVER_PID 2>/dev/null; then
            echo "Server crashed, exiting..."
            exit 1
          fi
          
          # Get current busy status
          BUSY=$(curl -s "http://localhost:$(( 5004 + ${{ matrix.instance }} ))/health" | jq -r .busy)
          
          # Log status
          echo "Instance ${{ matrix.instance }} status: $BUSY"
          
          sleep 60
        done 